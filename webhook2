------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

local Version = "1.6.45"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer

-- Safe require helper
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
    AutoFavourite = false,
    AutoSell = false,
    WebhookEnabled = false,
    WebhookUrl = ""
}

local allowedTiers = { [4]=true, [5]=true, [6]=true, [7]=true }

-- =========================
-- AUTO FAVOURITE
-- =========================
local function startAutoFavourite()
    task.spawn(function()
        while state.AutoFavourite do
            pcall(function()
                if not Replion or not ItemUtility then return end
                local netFolder = getNetFolder()
                local favoriteRemote = netFolder and netFolder:FindFirstChild("RE/FavoriteItem")
                if not favoriteRemote then return end

                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                for _, item in ipairs(items) do
                    local base = ItemUtility:GetItemData(item.Id)
                    if base and base.Data and allowedTiers[base.Data.Tier] and not item.Favorited then
                        favoriteRemote:FireServer(item.UUID)
                        item.Favorited = true
                    end
                end
            end)
            task.wait(5)
        end
    end)
end

-- =========================
-- AUTO SELL
-- =========================
local lastSellTime = 0
local AUTO_SELL_THRESHOLD = 60
local AUTO_SELL_DELAY = 60

local function startAutoSell()
    task.spawn(function()
        while state.AutoSell do
            pcall(function()
                if not Replion then return end
                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end

                local unfavoritedCount = 0
                for _, item in ipairs(items) do
                    if not item.Favorited then
                        unfavoritedCount += (item.Count or 1)
                    end
                end

                if unfavoritedCount >= AUTO_SELL_THRESHOLD and os.time() - lastSellTime >= AUTO_SELL_DELAY then
                    local netFolder = getNetFolder()
                    if netFolder then
                        local sellFunc = netFolder:FindFirstChild("RF/SellAllItems")
                        if sellFunc then
                            task.spawn(sellFunc.InvokeServer, sellFunc)
                            lastSellTime = os.time()
                        end
                    end
                end
            end)
            task.wait(10)
        end
    end)
end

-- =========================
-- AUTO FISH (1.5s delay)
-- =========================
local autoFishLoop
local function playCastAnim()
    pcall(function()
        if AnimationController and AnimationController.PlayAnimation then
            AnimationController:PlayAnimation("CastFromFullChargePosition1Hand")
        end
    end)
end

local function startAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop) end
    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then return end
        local equipEvent = net:WaitForChild("RE/EquipToolFromHotbar")
        local chargeFunc = net:WaitForChild("RF/ChargeFishingRod")
        local startMini  = net:WaitForChild("RF/RequestFishingMinigameStarted")
        local complete   = net:WaitForChild("RE/FishingCompleted")

        while state.AutoFish do
            if FishingController and FishingController.OnCooldown and FishingController:OnCooldown() then
                repeat task.wait(0.2) until not FishingController:OnCooldown() or not state.AutoFish
            end
            if not state.AutoFish then break end

            pcall(function()
                playCastAnim()
                equipEvent:FireServer(1)
                task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow())
                task.wait(0.1)
                startMini:InvokeServer(-0.75, 1)
                task.wait(0.2)
                for i=1,20 do
                    complete:FireServer()
                    task.wait(0.05)
                end
            end)

            -- delay between casts set to 1.5s
            local t = os.clock()
            while os.clock() - t < 1.5 and state.AutoFish do
                task.wait()
            end
        end
    end)
end

local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
end

-- =========================
-- LOW FPS (auto apply)
-- =========================
local function applyLowGfx()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
    for _,v in pairs(Lighting:GetChildren()) do
        if v:IsA("BlurEffect") or v:IsA("SunRaysEffect") or v:IsA("BloomEffect") or v:IsA("DepthOfFieldEffect") then
            v.Enabled = false
        end
    end
    game:GetService("Workspace").Terrain.WaterWaveSize = 0
    game:GetService("Workspace").Terrain.WaterWaveSpeed = 0
    game:GetService("Workspace").Terrain.WaterReflectance = 0
    game:GetService("Workspace").Terrain.WaterTransparency = 0
    print("[Performance] Low Graphics mode auto-enabled.")
end

applyLowGfx()

-- =========================
-- WEBHOOK (simplified)
-- =========================
local function sendFishWebhook(fishName, rarity)
    if not state.WebhookEnabled or state.WebhookUrl == "" then return end
    local data = {
        username = "e-Fishery",
        embeds = {{
            title = "ðŸŽ£ Fish Caught!",
            description = string.format("%s caught a **%s** (%s)", player.DisplayName, fishName, rarity),
            color = 65280,
            footer = { text = os.date("%H:%M:%S") }
        }}
    }

    local requestFunc = syn and syn.request or http_request or request or (fluxus and fluxus.request)
    if requestFunc then
        requestFunc({
            Url = state.WebhookUrl,
            Method = "POST",
            Headers = { ["Content-Type"] = "application/json" },
            Body = HttpService:JSONEncode(data)
        })
    end
end

-- hook into notifications
pcall(function()
    local guiNotif = player.PlayerGui:WaitForChild("Small Notification"):WaitForChild("Display"):WaitForChild("Container")
    local fishText = guiNotif:WaitForChild("ItemName")
    local rarityText = guiNotif:WaitForChild("Rarity")

    fishText:GetPropertyChangedSignal("Text"):Connect(function()
        task.wait(0.1)
        local fishName, rarity = fishText.Text, rarityText.Text
        if rarity:find("Epic") or rarity:find("Legendary") or rarity:find("Mythic") or rarity:find("Secret") then
            sendFishWebhook(fishName, rarity)
        end
    end)
end)

-------------------------------------------
----- =======[ UI SETUP ]
-------------------------------------------

local Window = WindUI:CreateWindow({
    Title = "e-Fishery V1",
    Icon = "shrimp",
    Author = "by Heyjiii",
    Folder = "e-Fishery",
    Size = UDim2.fromOffset(600, 400),
    Transparent = true,
    Theme = "Dark",
    KeySystem = false,
    ScrollBarEnabled = true,
    HideSearchBar = true,
})

local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local FishNotif = Window:Tab({ Title = "Fish Notification", Icon = "bell-ring" })

-- MAIN TAB
Main:Toggle({
    Title = "Auto Fish",
    Callback = function(Value)
        state.AutoFish = Value
        if Value then startAutoFish() else stopAutoFish() end
    end
})

Main:Toggle({
    Title = "Auto Favourite (Epic+)",
    Callback = function(Value)
        state.AutoFavourite = Value
        if Value then startAutoFavourite() end
    end
})

Main:Toggle({
    Title = "Auto Sell (Threshold)",
    Callback = function(Value)
        state.AutoSell = Value
        if Value then startAutoSell() end
    end
})

-- WEBHOOK TAB
FishNotif:Input({
    Title = "Webhook URL",
    Placeholder = "https://discord.com/api/webhooks/...",
    Callback = function(value)
        state.WebhookUrl = value
    end
})

FishNotif:Toggle({
    Title = "Enable Webhook",
    Callback = function(value)
        state.WebhookEnabled = value
        if value then
            WindUI:Notify({ Title = "Webhook", Content = "Webhook Enabled.", Duration = 3 })
        end
    end
})
