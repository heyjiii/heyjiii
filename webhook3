------------------------------------------
----- =======[ Load WindUI ]
-------------------------------------------

local Version = "1.6.45"
local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()

-------------------------------------------
----- =======[ GLOBAL & CORE FUNCTIONS ]
-------------------------------------------

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer

-- Safe require helper from Rayfield version
local function safeRequire(pathTbl)
    local ptr = ReplicatedStorage
    for _, seg in ipairs(pathTbl) do
        ptr = ptr:FindFirstChild(seg)
        if not ptr then return nil end
    end
    local ok, mod = pcall(require, ptr)
    return ok and mod or nil
end

-- Initialize controllers and utilities
local FishingController = safeRequire({"Controllers","FishingController"})
local AnimationController = safeRequire({"Controllers","AnimationController"})
local Replion = safeRequire({"Packages","Replion"}) or safeRequire({"Packages","replion"})
local ItemUtility = safeRequire({"Shared","ItemUtility"})

-- Net folder helper
local function getNetFolder()
    local packages = ReplicatedStorage:WaitForChild("Packages", 10)
    if not packages then return nil end
    local index = packages:FindFirstChild("_Index")
    if index then
        for _, child in ipairs(index:GetChildren()) do
            if child.Name:match("^sleitnick_net@") then
                return child:FindFirstChild("net")
            end
        end
    end
    return ReplicatedStorage:FindFirstChild("net") or ReplicatedStorage:FindFirstChild("Net")
end

-- =========================
-- STATE MANAGEMENT
-- =========================
local state = {
    AutoFish = false,
    AutoFavourite = false,
    AutoSell = false,
}

local allowedTiers = { [4]=true, [5]=true, [6]=true, [7]=true }

-- =========================
-- AUTO FAVOURITE
-- =========================
local function startAutoFavourite()
    task.spawn(function()
        while state.AutoFavourite do
            pcall(function()
                if not Replion or not ItemUtility then return end
                local netFolder = getNetFolder()
                local favoriteRemote = netFolder and netFolder:FindFirstChild("RE/FavoriteItem")
                if not favoriteRemote then return end

                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end
                for _, item in ipairs(items) do
                    local base = ItemUtility:GetItemData(item.Id)
                    if base and base.Data and allowedTiers[base.Data.Tier] and not item.Favorited then
                        favoriteRemote:FireServer(item.UUID)
                        item.Favorited = true
                    end
                end
            end)
            task.wait(5)
        end
    end)
end

-- =========================
-- AUTO SELL
-- =========================
local lastSellTime = 0
local AUTO_SELL_THRESHOLD = 60
local AUTO_SELL_DELAY = 60

local function startAutoSell()
    task.spawn(function()
        while state.AutoSell do
            pcall(function()
                if not Replion then return end
                local DataReplion = Replion.Client:WaitReplion("Data")
                local items = DataReplion and DataReplion:Get({"Inventory","Items"})
                if type(items) ~= "table" then return end

                local unfavoritedCount = 0
                for _, item in ipairs(items) do
                    if not item.Favorited then
                        unfavoritedCount += (item.Count or 1)
                    end
                end

                if unfavoritedCount >= AUTO_SELL_THRESHOLD and os.time() - lastSellTime >= AUTO_SELL_DELAY then
                    local netFolder = getNetFolder()
                    if netFolder then
                        local sellFunc = netFolder:FindFirstChild("RF/SellAllItems")
                        if sellFunc then
                            task.spawn(sellFunc.InvokeServer, sellFunc)
                            lastSellTime = os.time()
                        end
                    end
                end
            end)
            task.wait(10)
        end
    end)
end

-- =========================
-- AUTO FISH
-- =========================
local autoFishLoop
local function playCastAnim()
    pcall(function()
        if AnimationController and AnimationController.PlayAnimation then
            AnimationController:PlayAnimation("CastFromFullChargePosition1Hand")
        end
    end)
end

local function startAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop) end
    autoFishLoop = task.spawn(function()
        local net = getNetFolder(); if not net then return end
        local equipEvent = net:WaitForChild("RE/EquipToolFromHotbar")
        local chargeFunc = net:WaitForChild("RF/ChargeFishingRod")
        local startMini  = net:WaitForChild("RF/RequestFishingMinigameStarted")
        local complete   = net:WaitForChild("RE/FishingCompleted")

        while state.AutoFish do
            if FishingController and FishingController.OnCooldown and FishingController:OnCooldown() then
                repeat task.wait(0.2) until not FishingController:OnCooldown() or not state.AutoFish
            end
            if not state.AutoFish then break end

            pcall(function()
                playCastAnim()
                equipEvent:FireServer(1)
                task.wait(0.1)
                chargeFunc:InvokeServer(workspace:GetServerTimeNow())
                task.wait(0.1)
                startMini:InvokeServer(-0.75, 1)
                task.wait(0.2)
                for i=1,20 do
                    complete:FireServer()
                    task.wait(0.05)
                end
            end)

            -- changed delay from 0.7 â†’ 1.5
            local t = os.clock()
            while os.clock() - t < 1.5 and state.AutoFish do task.wait() end
        end
    end)
end

local function stopAutoFish()
    if autoFishLoop then task.cancel(autoFishLoop); autoFishLoop = nil end
end

-- =========================
-- TELEPORT
-- =========================
local function teleportTo(posList)
    local char = player.Character or player.CharacterAdded:Wait()
    local hrp = char:FindFirstChild("HumanoidRootPart") or char:WaitForChild("HumanoidRootPart")

    if hrp then
        local chosen = typeof(posList) == "table" and posList[math.random(1,#posList)] or posList
        hrp.CFrame = chosen
    end
end

-- =========================
-- LOW GRAPHICS (AUTO APPLY)
-- =========================
local function applyLowGfx()
    pcall(function()
        sethiddenproperty(workspace,"InterpolationThrottling",Enum.InterpolationThrottlingMode.Disabled)
        settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
        for _, v in ipairs(Lighting:GetChildren()) do
            if v:IsA("PostEffect") or v:IsA("BloomEffect") or v:IsA("BlurEffect") then
                v.Enabled = false
            end
        end
        Lighting.GlobalShadows = false
        Lighting.FogEnd = 9e9
    end)
end

-- auto apply on script execution
applyLowGfx()

-------------------------------------------
----- =======[ UI SETUP ]
-------------------------------------------

local Window = WindUI:CreateWindow({
    Title = "e-Fishery V1",
    Icon = "shrimp",
    Author = "by Zee (WindUI Edition)",
    Folder = "e-Fishery",
    Size = UDim2.fromOffset(600, 400),
    Transparent = true,
    Theme = "Dark",
    KeySystem = false,
    ScrollBarEnabled = true,
    HideSearchBar = true,
})

local Main = Window:Tab({ Title = "Main", Icon = "toggle-right" })
local AutoFarm = Window:Tab({ Title = "Auto Farm", Icon = "map" })
local FishNotif = Window:Tab({ Title = "Fish Notification", Icon = "bell-ring" })

-- =========================
-- MAIN TAB
-- =========================
local autoFishToggle
autoFishToggle = Main:Toggle({
    Title = "Auto Fish",
    Callback = function(Value)
        state.AutoFish = Value
        if Value then startAutoFish() else stopAutoFish() end
    end
})

Main:Toggle({
    Title = "Auto Favourite (Epic+)",
    Callback = function(Value)
        state.AutoFavourite = Value
        if Value then startAutoFavourite() end
    end
})

Main:Toggle({
    Title = "Auto Sell (Threshold)",
    Callback = function(Value)
        state.AutoSell = Value
        if Value then startAutoSell() end
    end
})

-- =========================
-- FISH NOTIFICATION
-- =========================
local webhookPath
FishNotif:Paragraph({
    Title = "Fish Notification",
    Color = "Green",
    Desc = "Sends a Discord embed when you catch Epic, Legendary, Mythic, Secret."
})

FishNotif:Input({
    Title="Webhook Key",Desc="Enter your Discord webhook key",
    Placeholder="id/token",
    Callback=function(text)
        if text=="" then return end
        webhookPath=text
    end
})

local FishDataById,VariantsByName={}, {}
pcall(function()
    for _, item in ipairs(ReplicatedStorage.Items:GetChildren()) do
        local ok,data=pcall(require,item)
        if ok and data.Data and data.Data.Type=="Fishes" then
            FishDataById[data.Data.Id]={Name=data.Data.Name,SellPrice=data.SellPrice or 0}
        end
    end
    for _,v in ipairs(ReplicatedStorage.Variants:GetChildren()) do
        local ok,data=pcall(require,v)
        if ok and data.Data and data.Data.Type=="Variant" then
            VariantsByName[data.Data.Name]=data.SellMultiplier or 1
        end
    end
end)

-- locked rarities
local allowedRarities = {Epic=true, Legendary=true, Mythic=true, Secret=true}

local function isTargetFish(_,rarity)
    for key in pairs(allowedRarities) do
        if string.find(string.lower(rarity), string.lower(key)) then
            return true
        end
    end
    return false
end

local function GetRobloxImage(assetId)
    local url="https://thumbnails.roblox.com/v1/assets?assetIds="..assetId.."&size=420x420&format=Png&isCircular=false"
    local ok,resp=pcall(game.HttpGet,game,url)
    if ok then
        local data=HttpService:JSONDecode(resp)
        if data and data.data and data.data[1] and data.data[1].imageUrl then
            return data.data[1].imageUrl
        end
    end
    return nil
end

local function sendFishWebhook(fishName,rarity,assetId,itemId,variantId)
    if not webhookPath or webhookPath=="" then
        return
    end
    local WebhookURL="https://discord.com/api/webhooks/"..webhookPath
    local imageUrl=GetRobloxImage(assetId)

    local caught=player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Caught")
    local rarest=player:FindFirstChild("leaderstats") and player.leaderstats:FindFirstChild("Rarest Fish")
    local basePrice=(FishDataById[itemId] and FishDataById[itemId].SellPrice or 0)*(VariantsByName[variantId] or 1)

    local rarityColors = {
        Secret     = 16777215,
        Legendary  = 16766720,
        Mythic     = 10181046,
        Epic       = 10197915,
    }
    local color = rarityColors[r
